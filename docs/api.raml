#%RAML 0.8
title: JamDB API
version: v1
baseUri: /{version}
protocols:
  - HTTPS
mediaType: application/vnd.api+json
schemas:
  - Errors: !include schemas/Errors.json
  - Namespace-create: !include schemas/Namespace-create.json
  - Namespace-multiple: !include schemas/Namespace-multiple.json
  - Namespace-single: !include schemas/Namespace-single.json
  - Namespace-update: !include schemas/Namespace-update.json
  - Namespace-replace: !include schemas/Namespace-replace.json
  - Namespace-create: !include schemas/Namespace-create.json
  - Collection-create: !include schemas/Collection-create.json
  - Collection-multiple: !include schemas/Collection-multiple.json
  - Collection-single: !include schemas/Collection-single.json
  - Collection-update: !include schemas/Collection-update.json
  - Collection-replace: !include schemas/Collection-replace.json
  - Collection-create: !include schemas/Collection-create.json
  - Document-create: !include schemas/Document-create.json
  - Document-multiple: !include schemas/Document-multiple.json
  - Document-single: !include schemas/Document-single.json
  - Document-update: !include schemas/Document-update.json
  - Document-replace: !include schemas/Document-replace.json
  - Document-create: !include schemas/Document-create.json
  - History-create: !include schemas/History-create.json
  - History-multiple: !include schemas/History-multiple.json
  - History-single: !include schemas/History-single.json
  - History-update: !include schemas/History-update.json
  - History-replace: !include schemas/History-replace.json
  - History-create: !include schemas/History-create.json
resourceTypes:
  - crud: !include resourceTypes/crud.raml
  - crudList: !include resourceTypes/crud-list.raml
traits:
  - paginated: !include traits/paginated.raml
  - filterable: !include traits/filterable.raml
securitySchemes:
  - jwt: !include securitySchemes/jam-jwt.raml
documentation:
  - title: Getting Started
    content: !include documentation/getting-started.md
  - title: API
    content: !include documentation/api.md

/auth:
  post:
    description: >
      Authenticate to JamDB via the provided data.
    responses:
      200:
        body:
          application/vnd.api+json:
            schema: !include schemas/Auth.json
            example: !include examples/auth.json

/namespaces:
  securedBy: [ null, jwt ]
  type: { crudList: { resourceType: Namespace } }

  /{Namespace_ID}:
    securedBy: [ null, jwt ]
    type: { crud: { resourceType: Namespace } }

    /collections:
      securedBy: [ null, jwt ]
      type: { crudList: { resourceType: Collection } }

      /{Collection_ID}:
        securedBy: [ null, jwt ]
        type: { crud: { resourceType: Collection } }

        /_search:
          securedBy: [ null, jwt ]
          get:
            description: |
              An interface to JamDB's underlying elasticsearch query engine.
              Results are returned in the same format as any other "listing" endpoint.
              Elasticsearch's ["score"](https://www.elastic.co/guide/en/elasticsearch/guide/master/relevance-intro.html#explain) field will be included in the result's "meta" field.
            is: [ paginated ]
            queryParameters:
              q:
                description: |
                  A lucene formatted search query.
                  See [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax) for more detail.
                # default: '*'
                type: string
                example: |
                    q=KEY:VALUE AND NOT KEY:OTHER_VALUE
                    q=KEY:(VALUE1 OR VALUE2)
                    q=Starwars episode *
                    q=*saur
            responses:
              200:
                body:
                  application/vnd.api+json:
                    schema: Document-multiple

        /documents:
          securedBy: [ null, jwt ]
          type: { crudList: { resourceType: Document } }

          /{Document_ID}:
            securedBy: [ null, jwt ]
            type: { crud: { resourceType: Document } }

            /history:
              securedBy: [ null, jwt ]
              type: { crudList: { resourceType: History } }

              /{History_ID}:
                securedBy: [ null, jwt ]
                type: { crud: { resourceType: History } }

# vi:ft=yaml
