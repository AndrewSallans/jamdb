#!/usr/bin/env python3
"""
Usage: jam [--version] [--help] [--config=PATH] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.
  -c, --config=FILE  The config file to load.

Commands:
   server        Run the JamDB server
   namespace     Manage namespaces

See 'jam help <command>' for more information on a specific command.

"""
from docopt import docopt

import jam
import jam.auth
import jam.server
import jam.settings

__version__ = 'jam {}'.format(jam.__version__)


def command(func):
    def inner(argv):
        return func(
            docopt(func.__doc__, version=__version__, argv=argv),
            argv
        )
    return inner


@command
def jam_regenerate(args, argv):
    """
    Usage: jam regenerate
    """
    jam.NamespaceManager().regenerate()


@command
def jam_list(args, argv):
    """
    Usage: jam list
    """
    print('\n'.join(jam.NamespaceManager().keys()))


@command
def jam_info(args, argv):
    """
    Usage: jam info <namespace>
    """
    ns_doc = jam.NamespaceManager().read(args['<namespace>'])
    print('Name: ', ns_doc.ref)
    print('Creator: ', ns_doc.created_by)
    print('Last Modifed By: ', ns_doc.modified_by)
    print('Permissions:\n', '\n'.join(['\t{}: {!r}'.format(k, jam.auth.Permissions(v)) for (k, v) in ns_doc.data['permissions'].items()]))


@command
def jam_update(args, argv):
    """
    Usage: jam update <namespace> [--user=USER] [--rename=NAME] [--permissions (<user-id> <permission>)]...

    Options:
        -p, --permissions  Permissions to update in the form of <user-id> <permission as int>
        -r, --rename=NAME  Rename namespace to NAME
        -u, --user=USER  The user to perform this update as [default: sys]
        -d, --delete-permissions=ID  Delete the permissions for ID
    """
    if args['--permissions']:
        ns_doc = jam.NamespaceManager().read(args['<namespace>'])
        jam.NamespaceManager().update(args['<namespace>'], {
            'permissions': {**{
                uid: getattr(jam.auth.Permissions, p.upper())
                for (uid, p)
                in zip(args['<user-id>'], args['<permission>'])
            }, **ns_doc.data['permissions']}
        }, args['--user'])


@command
def jam_server(args, argv):
    """
    Usage: jam server [--port=PORT] [--debug] [--host=HOST] [--fork]

    Options:
        -f, --fork  Fork the server
        -d, --debug  Run in debug mode
        -p, --port=PORT  The port to bind to [default: 1212]
        -h, --host=HOST  The host to bind to [default: 127.0.0.1]
    """
    del args['server']
    jam.settings.update({
        key.lstrip('-').upper(): val
        for key, val in args.items()
        if key in argv
    })
    jam.server.main()


@command
def jam_namespace(args, argv):
    """
    Usage: jam (ns|namespace) create <name> [--creator=USERID]
           jam (ns|namespace) update <name>
           jam (ns|namespace) delete <name>
           jam (ns|namespace) regen <name>
           jam (ns|namespace) list <name>
           jam (ns|namespace) regenerate <name>

    Options:
        -c, --creator=USERID  The user id for the creator [default: system]
    """
    if args['create']:
        jam.NamespaceManager().create_namespace(args['<name>'], args['--creator'])
    elif args['delete']:
        # TODO Clean up collections
        jam.NamespaceManager().delete(args['<name>'], args['--creator'])
    elif args['regenerate'] or args['regen']:
        jam.NamespaceManager().get_namespace(args['<name>']).regenerate()
    elif args['list']:
        print('\n'.join(jam.NamespaceManager().get_namespace(args['<name>']).keys()))


@command
def jam_token(args, argv):
    """
    Usage: jam token <user> [--exp=TIME]

    Options:
        -e, --exp=TIME  The user id for the creator [default: 1]
    """
    print(jam.auth.User.create(*args['<user>'].split('-'), exp=int(args['--exp'])).token.decode('utf-8'))


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    from jam import settings
    if args['--config']:
        print('Loading settings from {}'.format(args['--config']))
        settings.load(args['--config'])
    try:
        return {
            'ns': jam_namespace,
            'info': jam_info,
            'list': jam_list,
            'token': jam_token,
            'server': jam_server,
            'update': jam_update,
            'regen': jam_regenerate,
            'namespace': jam_namespace,
            'regenerate': jam_regenerate,
        }[args['<command>']]([args['<command>']] + args['<args>'])
    except KeyError:
        print('Invalid command "{}"'.format(args['<command>']))


if __name__ == '__main__':
    main()
