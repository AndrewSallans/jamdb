#!/usr/bin/env python
"""
Usage: jam [--version] [--help] [--config=PATH] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.
  -c, --config=FILE  The config file to load.

Commands:
   server        Run the JamDB server
   namespace     Manage namespaces

See 'jam help <command>' for more information on a specific command.

"""
from docopt import docopt

import jam
import jam.settings

__version__ = 'jam {}'.format(jam.__version__)


def jam_regenerate(argv):
    """
    Usage: jam regenerate
    """
    docopt(jam_regenerate.__doc__, version=__version__, argv=argv)
    import jam
    jam.NamespaceManager().regenerate()


def jam_list(argv):
    """
    Usage: jam list
    """
    docopt(jam_list.__doc__, version=__version__, argv=argv)
    import jam
    print('\n'.join(jam.NamespaceManager().keys()))


def jam_server(argv):
    """
    Usage: jam server [--port=PORT] [--debug] [--host=HOST]

    Options:
        -d, --debug  Run in debug mode
        -p, --port=PORT  The port to bind to [default: 1212]
        -h, --host=HOST  The host to bind to [default: 127.0.0.1]
    """
    args = docopt(jam_server.__doc__, version=__version__, argv=argv)
    from jam.server import main
    main(debug=args['--debug'], host=args['--host'], port=args['--port'])


def jam_namespace(argv):
    """
    Usage: jam (ns|namespace) create <name> [--creator=USERID]
           jam (ns|namespace) update <name>
           jam (ns|namespace) delete <name>
           jam (ns|namespace) regen <name>
           jam (ns|namespace) list <name>
           jam (ns|namespace) regenerate <name>

    Options:
        -c, --creator=USERID  The user id for the creator [default: system]
    """
    import jam
    args = docopt(jam_namespace.__doc__, version=__version__, argv=argv)
    if args['create']:
        jam.NamespaceManager().create_namespace(args['<name>'], args['--creator'])
    elif args['delete']:
        # TODO Clean up collections
        jam.NamespaceManager().delete(args['<name>'], args['--creator'])
    elif args['regenerate'] or args['regen']:
        jam.NamespaceManager().get_namespace(args['<name>']).regenerate()
    elif args['list']:
        print('\n'.join(jam.NamespaceManager().get_namespace(args['<name>']).keys()))


def jam_token(argv):
    """
    Usage: jam token <user> [--exp=TIME]

    Options:
        -e, --exp=TIME  The user id for the creator [default: 1]
    """
    from jam.auth import User
    args = docopt(jam_token.__doc__, version=__version__, argv=argv)
    print(User.create(*args['<user>'].split('-'), exp=int(args['--exp'])).token.decode('utf-8'))


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    from jam import settings
    if args['--config']:
        print('Loading settings from {}'.format(args['--config']))
        settings.load(args['--config'])
    try:
        return {
            'ns': jam_namespace,
            'list': jam_list,
            'token': jam_token,
            'server': jam_server,
            'regen': jam_regenerate,
            'namespace': jam_namespace,
            'regenerate': jam_regenerate,
        }[args['<command>']]([args['<command>']] + args['<args>'])
    except KeyError:
        print('Invalid command "{}"'.format(args['<command>']))


if __name__ == '__main__':
    main()
