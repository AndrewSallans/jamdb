#!/usr/bin/env python
"""
Usage: jam [--version] [--help] [--config=PATH] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.
  -c, --config=FILE  The config file to load.

Commands:
   server        Run the JamDB server
   regenerate    Regenerate a namespace or the manager
   list          List all namespaces
   create        Create a new namespace
   info          Get info for a namepsace
   update        Update a namespace's attributes
   delete        Delete a namespace

See 'jam help <command>' for more information on a specific command.

"""
import json
from docopt import docopt

import jam
import jam.auth
import jam.server
import jam.settings

__version__ = 'jam {}'.format(jam.__version__)


def command(func):
    def inner(argv):
        return func(
            docopt(func.__doc__, version=__version__, argv=argv),
            argv
        )
    return inner


@command
def jam_regenerate(args, argv):
    """
    Usage: jam regenerate [<namespace>]

    Regenerates the jam namespace manager.
    If a namespace is given, the namespace will be regenerated
    """
    if args['<namespace>']:
        return jam.NamespaceManager().get_namespace(args['<namespace>']).regenerate()
    jam.NamespaceManager().regenerate()


@command
def jam_list(args, argv):
    """
    Usage: jam list [<namespace> [<collection>]]
    """
    subj = jam.NamespaceManager()
    if args['<namespace>']:
        subj = subj.get_namespace(args['<namespace>'])
    if args['<collection>']:
        subj = subj.get_collcetion(args['<collection>'])

    print('\n'.join(subj.keys()))


@command
def jam_info(args, argv):
    """
    Usage: jam info <namespace> [<collection>]
    """
    if args['<collection>']:
        doc = jam.NamespaceManager().get_namespace(args['<namespace>']).read(args['<collection>'])
    else:
        doc = jam.NamespaceManager().read(args['<namespace>'])
    print('Name: ', doc.ref)
    print('Creator: ', doc.created_by)
    print('Schema:\n', json.dumps(doc.data.get('schema'), indent=4))
    print('Last Modifed By: ', doc.modified_by)
    print('Permissions:\n', '\n'.join(['\t{}: {!r}'.format(k, jam.auth.Permissions(v)) for (k, v) in doc.data['permissions'].items()]))


@command
def jam_update(args, argv):
    """
    Usage: jam update <namespace> [--user=USER] [--rename=NAME] [--delete-permissions <user-id>]... [--permissions (<user-id> <permission>)]...

    Options:
        -p, --permissions  Permissions to update in the form of <user-id> <permission as int>
        -r, --rename=NAME  Rename namespace to NAME
        -u, --user=USER  The user to perform this update as [default: system]
        -d, --delete-permissions=UID  Delete the permissions for ID
    """
    if args['--permissions']:
        jam.NamespaceManager().update(args['<namespace>'], [
            {'op': 'add', 'path': '/permissions/{}'.format(uid), 'value': getattr(jam.auth.Permissions, p.upper())}
            for (uid, p) in zip(args['<user-id>'], args['<permission>'])
        ], args['--user'])

    if args['--delete-permissions']:
        jam.NamespaceManager().update(args['<namespace>'], [
            {'op': 'remove', 'path': '/permissions/{}'.format(uid)}
            for uid in args['--delete-permissions']
        ], args['--user'])


@command
def jam_userify(args, argv):
    """
    Usage: jam userify <namespace> <collection> [--user=USER]

    Options:
        -u, --user=USER  The user to perform this update as [default: system]
    """
    ns = jam.NamespaceManager().get_namespace(args['<namespace>'])
    ns.update(args['<collection>'], [{
        'op': 'test', 'path': '/schema', 'value': None
    }, {
        'op': 'add', 'path': '/schema', 'value': {
            'type': 'jsonschema',
            'schema': {
                'password': {
                    'id': 'password',
                    'type': 'string',
                    'pattern': '^\$2b\$1[0-3]\$\S{53}$'
                },
                'required': ['password']
            }
        }
    }], args['--user'])


@command
def jam_create(args, argv):
    """
    Usage: jam create <name> [--creator=USERID] [--collection] [--document]

    Options:
        -c, --creator=USERID  The user id for the creator [default: system]
    """
    jam.NamespaceManager().create_namespace(args['<name>'], args['--creator'])


@command
def jam_server(args, argv):
    """
    Usage: jam server [--port=PORT] [--debug] [--host=HOST] [--fork]

    Options:
        -f, --fork  Fork the server
        -d, --debug  Run in debug mode
        -p, --port=PORT  The port to bind to [default: 1212]
        -h, --host=HOST  The host to bind to [default: 127.0.0.1]
    """
    del args['server']
    jam.settings.update({
        key.lstrip('-').upper(): val
        for key, val in args.items()
        if key in argv
    })
    jam.server.main()


@command
def jam_token(args, argv):
    """
    Usage: jam token <user> [--exp=TIME]

    User is formatted as {type}-{provider}-{id}

    Options:
        -e, --exp=TIME  The time, in hours, for the token to last for [default: 1]
    """
    print(jam.auth.User.create(*args['<user>'].split('-'), exp=int(args['--exp'])).token.decode('utf-8'))


@command
def jam_help(args, argv):
    """
    Usage: jam help <command>
    """
    print('todo')


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    from jam import settings
    if args['--config']:
        print('Loading settings from {}'.format(args['--config']))
        settings.load(args['--config'])
    try:
        return {
            'create': jam_create,
            'info': jam_info,
            'help': jam_help,
            'list': jam_list,
            'token': jam_token,
            'server': jam_server,
            'update': jam_update,
            'userify': jam_userify,
            'regen': jam_regenerate,
            'regenerate': jam_regenerate,
        }[args['<command>']]([args['<command>']] + args['<args>'])
    except KeyError:
        print('Invalid command "{}"'.format(args['<command>']))


if __name__ == '__main__':
    main()
